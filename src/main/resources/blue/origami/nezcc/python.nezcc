# nezcc file

extension          = py

# type

Bool               = 
Byte               = 
Byte[]             = 
Int32              = 
Int64              = 
Array              = 
Symbol             = 
Tree               = 
UInt8              = 

# unsigned         = %s & 0xff

# this.defineVariable("indexMap", "short[256]");
# this.defineSymbol("bitis", "bitis");

# syntax

comment          = # %s
;                = 
#module           = final class %s {
#end module       = }

struct           = class %s :
end struct       = 
#field            = %s %s;
constructor      = def __init__(self,%s=None):
end constructor  = 
init             = self.%s = %s
#new              = new %s

#functype         = '''
#public interface %2$s {
#  public %1$s apply(%3$s);
#}
#'''
#functypeparam    = %1$s %2$s
#functypeparams   = ,

const            = %2$s = %3$s

function         = def %2$s(%3$s):
end function     = 
param            = %2$s
params           = ,
return           = return %s

getter           = %s.%s
setter           = %s.%s = %s

alen             = len(%s)
aindex           = %s[%s]
anew             = [None] * %2$s
group            = (%s)

#cast             = (%s)(%s)

and              = %s and %s
or               = (%s) or (%s)
not              = not (%s)
ifexpr           = (%2$s if (%1$s) else (%3$s))

funccall         = %s(%s)
args             = ,
#apply            = %s.apply
#funcref          = $|base|::%s

true             = True
false            = False
null             = None

val              = %2$s = %3$s
var              = %2$s = %3$s
assign           = %s = %s

if               = if %s:
end if           = 

while            = while %s:
end while        = 

#switch           = switch(%s) {
#case             = case %s : %s
#default          = default : %s
#end switch       = }

lambda           = (lambda %s : %s)
varprefix        = _
#funcprefix       = _

# main
zero             = (%s + '\0')
subbyte          = %s[%s:%s]
toString         = %s.decode('utf-8')
toBytes          = %s.encode('utf-8')

pair             = (%s,%s)
second           = %s[1]


imports = '''

'''

libs = '''

'''

main = '''

'''

man = '''

'''

