# nezcc file

extension          = rs

# type

Bool               = bool
Byte               = &str
Int                = i32
Int32              = i32
Int64              = i64
Array              = %s
Symbol             = &str
Tree               = T
typeparam          = %s<%s>
String             = &str

unsigned           = %s & 0xff
keyindex           = (%s) as $|Int|

# syntax

comment          = // %s
begin            = {
end              = }
;                = ;

module           = mod $|base| {
struct           = struct %s {
field            = %2$s: %1$s,
value            = %1$s {%2$s} 
valueparam       = %1$s: %2$s 
valueparams      = , 


#functype         = 

const            = let %2$s = %3$s;
const_array      = %2$s[%1$s; %3$s] = %4$s;

function         = fn %2$s(%3$s) -> %1$s {
param             = %2$s: %1$s
params            = ,
return           = %s

#cast             = (@@@@%s)(%s)

Array.size        = %s.length
Array.get         = %s[%s]
#Array.new         = 

apply            = apply!(%s)
funcref          =

if               = if %s {
else if          = else if %s {
while            = while %s {
switch           = match %s {
case             = %s => %s
#default          = _ => %s

ifexpr           = if %s {%s} else{%s} 

lambda           = (%s) -> %s

val              = let %2$s = %3$s;
var              = let mut %2$s = %3$s;
assign           = %s = %s

array            = {
arrays           = ,
end array        = }


#varprefix        = _
#funcprefix       = _


