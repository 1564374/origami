# nezcc file

extension          = hs

# type

Bool               = Bool
Byte               = Word8
Byte[]             = ByteString
Int                = Int
Int64              = Int64
Array              = [%s]
String             = String
Tree               = a

#structname         = State %1$s %1$s

String->Byte[]     = pack %s
Byte[]->String     = unpack %s


Array.new          = %s[%s]
Array.size         = ${%s}
Array.get          = %s->[%s]
Array.slice        = %s[%s:%s]

List               = @
List.new           = ()
List.get           = %s->[%s]
List.add           = push(%s,%s)

# syntax

comment          = -- %s
begin            =
end              =
;                =

module           = module $|base|(parse) where
end module       = 
struct           = data %1$s = %1$s {%2$s} deriving(Show)
record           = %2$s :: %1$s
records          = ,

getter           = (%2$s %1$s)
setter           = %s.%s = %s

functype         = %3$s -> %1$s
functypeparam    = %1$s
functypeparams   = ->

const            = '''
%2$s :: %1$s
%2$s = %3$s
'''

function         = '''
%2$s :: %3$s
%2$s %3$s = 
'''
apply            = %s

true             = True
false            = False
null             = Nothing

val              = let %2$s = %3$s in
var              = let %2$s = %3$s in
assign           = %s <- %s

if               = if(%s) 
else if          = else if(%s) 
while            = while(%s) 
#switch           = switch(%s) {
#case             = case %s : %s
#default          = default : %s

and              = %s && %s
or               = (%s) || (%s)
not              = not (%s)
ifexpr           = if (%1$s) then %2$s else (%3$s)

funccall         = (%s %s)
arg              = (%s)
args             = 

lambda           = \%s -> %s

#base64           = B("%s")
#bools            = B256("%s")

varname           = %s'

imports = '''
import Control.Monad
import Control.Monad.State
import Control.Applicative
import Data.ByteString
import Data.ByteString.Short
import Data.Word

'''

libs = '''

'''



main = '''

'''

man = '''


'''