# perl5.nezcc

extension          = pl

# type

structname         = $
Array.new          = %s[%s]
Array.size         = ${%s}
Array.get          = %s->[%s]
Array.slice        = %s[%s:%s]

List               = @
List.new           = ()
List.get           = %s->[%s]
List.add           = push(%s,%s)

#Byte->Int         = %s & 0xff
#Int64->Int         = (%s)
String->Byte[]     = unpack('C*', %s)
Byte[]->String     = pack(%s)
# syntax

comment            = # %s
begin              = {
end                = }

struct           = struct %s => {
end struct       = };
field            = %2$s => '$';
malloc           = %1$s->new()

getter           = %s->%s
setter           = %s->%s(%s);

const            = my %2$s = %3$s;
array            = [
end array        = ]

function         = '''
sub %2$s {
  my (%3$s) = @_;
'''
param            = %2$s
val              = my %2$s = %3$s;

true             = 1
false            = 0
null             = ()

if               = if(%s) {
else if          = elif(%s) {
while            = while(%s) {
#switch           = switch(%s) {
#case             = case %s : %s
#default          = default : %s

varname          = $%s
constname        = $%s
structname       = $

lambda           = sub { my %1$s = $_[0]; %2$s; }
funcref          = &\%s
apply            = %s->

imports = '''
#!/usr/bin/perl
use strict;
use warnings;
use Class::Struct;
'''

main = '''
sub readdata {
  my ($fname) = @_;
  if(-f $fname) {
    my @inputs = ()
    open my $file,'<',$name or "Cannot open a file: $fname\n";
    binmode $file; 
    my $val;
    while(read($file, $val, 1)){
      push(@inputs, unpack('C', $val))
    }
    close $file;
    push(@inputs, 0)
    return \@inputs;
  }
  return \unpack('C*', ($fname . '\0'));
}
'''

man1 = '''
=============
 INTEGRATION
=============

Just call the following function to parse a tree.

Tree *Nez_parseTree(const char *inputs);

Example (in $|base|.c) 

   Tree *t = Nez_parseTree("sometext");
   if(t != NULL) {
      Tree_dump(t);
   }

NOTE: This parser has no GC support for trees. 
Add some reference counting for trees.

=============
 QUICK START
=============
 
 make $|base| CFLAGS='-g -O3'
 ./$|base| <file> or <input-text>
 
Read the main function. You will know how to
integrate the parser into your programs.
'''